Clock data type. Write a data type Clock.java that represents time on a 24-hour clock, such as 00:00, 13:30, or 23:59. Time is measured in hours (00–23) and minutes (00–59). To do so, implement the following public API:

public class Clock {

    // Creates a clock whose initial time is h hours and m minutes.
    public Clock(int h, int m)

    // Creates a clock whose initial time is specified as a string, using the format HH:MM.
    public Clock(String s)

    // Returns a string representation of this clock, using the format HH:MM.
    public String toString()

    // Is the time on this clock earlier than the time on that one?
    public boolean isEarlierThan(Clock that)

    // Adds 1 minute to the time on this clock.
    public void tic()

    // Adds Δ minutes to the time on this clock.
    public void toc(int delta)

    // Test client (see below).
    public static void main(String[] args)
}

Here is some more information about the required behavior:
Two-argument constructor. Throw an IllegalArgumentException if either integer argument is outside its prescribed bounds (hours between 0 and 23, minutes between 0 and 59).

One-argument constructor. The string argument is composed of two digits, followed by a colon, followed by two digits, such as 09:45. Throw an IllegalArgumentException if either the string argument is not in this format or if it does not correspond to a valid time between 00:00 and 23:59.

String representation. The format is the hours (2 digits), followed by a colon, followed by the minutes (2 digits). Two examples are 00:00 and 23:59.

Ordering. Times are ordered from 00:00 (earliest) to 23:59 (latest).

Tic. Add one minute to the current time. For example, one minute after 06:00 is 06:01; one minute after 23:59 is 00:00.

Toc. Add Δ minutes to the current time. For example, 60 minutes after 12:34 is 13:34. Throw an IllegalArgumentException if Δ is negative.

Test client. The main() method must call each instance method directly and help verify that they work as prescribed.

Performance. All instance methods must take constant time.

Submission. Submit a .zip file containing ColorHSB.java and Clock.java. You may not call library functions except those in the java.lang (such as Integer.parseInt() and Math.sqrt()). Use only Java features that have already been introduced in the course (e.g., objects but not interfaces).